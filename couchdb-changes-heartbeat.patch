Index: src/couchdb/couch_changes.erl
===================================================================
--- src/couchdb/couch_changes.erl	(revision 1199356)
+++ src/couchdb/couch_changes.erl	(working copy)
@@ -26,6 +26,14 @@
     fwd ->
         Args#changes_args.since
     end,
+    % begin timer to deal with heartbeat when filter function fails
+    case Args#changes_args.heartbeat of
+    undefined ->
+        erlang:erase(last_changes_heartbeat);
+    Val when is_integer(Val); Val =:= true ->
+        put(last_changes_heartbeat, now())
+    end,
+
     if Feed == "continuous" orelse Feed == "longpoll" ->
         fun(CallbackAcc) ->
             {Callback, UserAcc} = get_callback_acc(CallbackAcc),
@@ -59,14 +67,17 @@
         fun(CallbackAcc) ->
             {Callback, UserAcc} = get_callback_acc(CallbackAcc),
             UserAcc2 = start_sending_changes(Callback, UserAcc, Feed),
-            {ok, {_, LastSeq, _Prepend, _, _, UserAcc3, _, _, _, _}} =
+            {Timeout, TimeoutFun} = get_changes_timeout(Args, Callback),
+            {ok, {_, LastSeq, _Prepend, _, _, UserAcc3, _, _, _, _, _, _}} =
                 send_changes(
                     Args#changes_args{feed="normal"},
                     Callback,
                     UserAcc2,
                     Db,
                     StartSeq,
-                    <<>>
+                    <<>>,
+                    Timeout,
+                    TimeoutFun
                 ),
             end_sending_changes(Callback, UserAcc3, LastSeq, Feed)
         end
@@ -195,7 +206,7 @@
 start_sending_changes(Callback, UserAcc, ResponseType) ->
     Callback(start, ResponseType, UserAcc).
 
-send_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend) ->
+send_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout, TimeoutFun) ->
     #changes_args{
         include_docs = IncludeDocs,
         conflicts = Conflicts,
@@ -212,7 +223,7 @@
         fun changes_enumerator/2,
         [{dir, Dir}],
         {Db, StartSeq, Prepend, FilterFun, Callback, UserAcc, ResponseType,
-            Limit, IncludeDocs, Conflicts}
+            Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}
     ).
 
 keep_sending_changes(Args, Callback, UserAcc, Db, StartSeq, Prepend, Timeout,
@@ -223,8 +234,8 @@
         db_open_options = DbOptions
     } = Args,
     % ?LOG_INFO("send_changes start ~p",[StartSeq]),
-    {ok, {_, EndSeq, Prepend2, _, _, UserAcc2, _, NewLimit, _, _}} = send_changes(
-        Args#changes_args{dir=fwd}, Callback, UserAcc, Db, StartSeq, Prepend
+    {ok, {_, EndSeq, Prepend2, _, _, UserAcc2, _, NewLimit, _, _, _, _}} = send_changes(
+        Args#changes_args{dir=fwd}, Callback, UserAcc, Db, StartSeq, Prepend, Timeout, TimeoutFun
     ),
     % ?LOG_INFO("send_changes last ~p",[EndSeq]),
     couch_db:close(Db),
@@ -232,7 +243,7 @@
         end_sending_changes(Callback, UserAcc2, EndSeq, ResponseType);
     true ->
         case wait_db_updated(Timeout, TimeoutFun, UserAcc2) of
-        {updated, UserAcc3} ->
+        {updated, UserAcc4} ->
             % ?LOG_INFO("wait_db_updated updated ~p",[{Db#db.name, EndSeq}]),
             DbOptions1 = [{user_ctx, Db#db.user_ctx} | DbOptions],
             case couch_db:open(Db#db.name, DbOptions1) of
@@ -240,7 +251,7 @@
                 keep_sending_changes(
                     Args#changes_args{limit=NewLimit},
                     Callback,
-                    UserAcc3,
+                    UserAcc4,
                     Db2,
                     EndSeq,
                     Prepend2,
@@ -250,17 +261,17 @@
             _Else ->
                 end_sending_changes(Callback, UserAcc2, EndSeq, ResponseType)
             end;
-        {stop, UserAcc3} ->
-            % ?LOG_INFO("wait_db_updated stop ~p",[{Db#db.name, EndSeq}]),
-            end_sending_changes(Callback, UserAcc3, EndSeq, ResponseType)
+        {stop, UserAcc4} ->
+             % ?LOG_INFO("wait_db_updated stop ~p",[{Db#db.name, EndSeq}]),
+            end_sending_changes(Callback, UserAcc4, EndSeq, ResponseType)
         end
     end.
 
 end_sending_changes(Callback, UserAcc, EndSeq, ResponseType) ->
     Callback({stop, EndSeq}, ResponseType, UserAcc).
 
-changes_enumerator(DocInfo, {Db, _, _, FilterFun, Callback, UserAcc,
-    "continuous", Limit, IncludeDocs, Conflicts}) ->
+changes_enumerator(DocInfo, {Db, _, Prepend, FilterFun, Callback, UserAcc,
+    "continuous", Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}) ->
 
     #doc_info{high_seq = Seq} = DocInfo,
     Results0 = FilterFun(Db, DocInfo),
@@ -268,18 +279,25 @@
     Go = if Limit =< 1 -> stop; true -> ok end,
     case Results of
     [] ->
-        {Go, {Db, Seq, nil, FilterFun, Callback, UserAcc, "continuous", Limit,
-                IncludeDocs, Conflicts}
-        };
+        {Done, UserAcc2} = maybe_heartbeat(Timeout, TimeoutFun, UserAcc),
+        case Done of
+        stop ->
+            {stop, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                    Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}};
+        ok ->
+            {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                    Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
+        end; 
     _ ->
         ChangesRow = changes_row(Db, Results, DocInfo, IncludeDocs, Conflicts),
         UserAcc2 = Callback({change, ChangesRow, <<>>}, "continuous", UserAcc),
-        {Go, {Db, Seq, nil, FilterFun, Callback, UserAcc2, "continuous",
-                Limit - 1, IncludeDocs, Conflicts}
+        reset_heartbeat(),
+        {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, "continuous",
+                Limit - 1, IncludeDocs, Conflicts, Timeout, TimeoutFun}
         }
     end;
 changes_enumerator(DocInfo, {Db, _, Prepend, FilterFun, Callback, UserAcc,
-    ResponseType, Limit, IncludeDocs, Conflicts}) ->
+    ResponseType, Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}) ->
 
     #doc_info{high_seq = Seq} = DocInfo,
     Results0 = FilterFun(Db, DocInfo),
@@ -287,16 +305,22 @@
     Go = if (Limit =< 1) andalso Results =/= [] -> stop; true -> ok end,
     case Results of
     [] ->
-        {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc, ResponseType,
-                Limit, IncludeDocs, Conflicts}
-        };
+        {Done, UserAcc2} = maybe_heartbeat(Timeout, TimeoutFun, UserAcc),
+        case Done of
+        stop ->
+            {stop, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, ResponseType,
+                    Limit, IncludeDocs, Conflicts}};
+        ok ->
+            {Go, {Db, Seq, Prepend, FilterFun, Callback, UserAcc2, ResponseType,
+                    Limit, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
+        end;
     _ ->
         ChangesRow = changes_row(Db, Results, DocInfo, IncludeDocs, Conflicts),
         UserAcc2 = Callback({change, ChangesRow, Prepend}, ResponseType, UserAcc),
+        reset_heartbeat(),
         {Go, {Db, Seq, <<",\n">>, FilterFun, Callback, UserAcc2, ResponseType,
-                Limit - 1, IncludeDocs, Conflicts}
-        }
-    end.
+                Limit - 1, IncludeDocs, Conflicts, Timeout, TimeoutFun}}
+        end.
 
 
 changes_row(Db, Results, DocInfo, IncludeDoc, Conflicts) ->
@@ -337,3 +361,29 @@
     after 0 ->
         {updated, UserAcc}
     end.
+
+reset_heartbeat() ->
+    case get(last_changes_heartbeat) of
+    undefined ->
+        ok;
+    _ ->
+        put(last_changes_heartbeat, now())
+    end.
+
+maybe_heartbeat(Timeout, TimeoutFun, Acc) ->
+    Now = now(),
+    Before = get(last_changes_heartbeat),
+    case Before of
+    undefined ->
+        {ok, Acc};
+    _ ->
+        case timer:now_diff(Now, Before) div 1000 >= Timeout of
+        true ->
+            Acc2 = TimeoutFun(Acc),
+            put(last_changes_heartbeat, Now),
+            Acc2;
+        false ->
+            {ok, Acc}
+        end
+    end.
+
